module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    //output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,     // AVR RX buffer full
    output led_seg_options [8], // 7-segment LEDs for options
    output led_sel_options [4],  // Digit select for options
    output led_seg_options1 [8], // 7-segment LED for options (last number)
    output led_seg_goal [8], // 7-segment LEDs for goal
    output led_sel_goal [4],  // Digit select for goal
    output led_seg_output [8], // 7-segment LEDs for output
    output led_sel_output [4],  // Digit select for output
    output led_seg_input [8], // 7-segment LED for input
    output led_seg_input_power,
    input button_operator[5], //5 buttons for operation selection
    input button_number[5], //5 buttons for selecting number from options
    input button_restart // restart button
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
   edge_detector edge_detector_restart (#RISE(1), #FALL(0));
    button_conditioner button_cond_restart;
    edge_detector edge_detector_operator0 (#RISE(1), #FALL(0));
    button_conditioner button_cond_operator0;
    edge_detector edge_detector_operator1 (#RISE(1), #FALL(0));
    button_conditioner button_cond_operator1;
    edge_detector edge_detector_operator2 (#RISE(1), #FALL(0));
    button_conditioner button_cond_operator2;  
    edge_detector edge_detector_operator3 (#RISE(1), #FALL(0));
   button_conditioner button_cond_operator3;
   edge_detector edge_detector_operator4 (#RISE(1), #FALL(0));
    button_conditioner button_cond_operator4;
    edge_detector edge_detector_number0 (#RISE(1), #FALL(0));
    button_conditioner button_cond_number0;
    edge_detector edge_detector_number1 (#RISE(1), #FALL(0));
   button_conditioner button_cond_number1;
    edge_detector edge_detector_number2 (#RISE(1), #FALL(0));
    button_conditioner button_cond_number2;
    edge_detector edge_detector_number3 (#RISE(1), #FALL(0));
    button_conditioner button_cond_number3;
    edge_detector edge_detector_number4 (#RISE(1), #FALL(0));
    button_conditioner button_cond_number4;

    .rst(rst) {
    dff goal[8]; // saves goal
    dff level[3]; // saves level
    dff options_temp[20]; //saves temp options
    dff options[20]; //saves options
    dff number_input[4]; // saves input number_input
    dff number_output[8]; //saves output
      
    counter ctr (#SIZE(3), #DIV(16));//counter to light up led segments 

      //defining state machine states
      fsm state = {IDLE,LEVELSELECT,LOAD,LEVEL1,WIN,LOSE, END};
      
    }
  }

  rom rom;
  alu alu1;   //calling the alu module
  decimal3 decimal_output; //module to convert 8-bit into decimal
  decimal3 decimal_goal;
  seven_seg sevenseg_options_0;// 1st options value (from right)
  seven_seg sevenseg_options_1;// 2nd options value
  seven_seg sevenseg_options_2;// 3rd options value
  seven_seg sevenseg_options_3;// 4th options value
  seven_seg sevenseg_options_4;// 5th options value
  seven_seg sevenseg_goal_0;// 1st goal value
  seven_seg sevenseg_goal_1;// 2nd goal value
  seven_seg sevenseg_goal_2;// 3rd goal value
  seven_seg sevenseg_goal_3;// 4th goal value
  seven_seg sevenseg_input; // input value
  seven_seg sevenseg_output_0; // 1st output value digit
  seven_seg sevenseg_output_1; // 2nd output value digit
  seven_seg sevenseg_output_2; // 3rd output value digit
  seven_seg sevenseg_output_3; // 4th output value digit
  const PASS= b10111010010101011101;
  const FAIL= b11001010000111111101;
  const LSEL= b11110101111011111101;
  const OUTPUT0 = b11111111;
  
  
  always {
    reset_cond.in = ~rst_n;    // input raw inverted reset signal
    rst = reset_cond.out;      // conditioned reset
    
    //led = 8x{8h0}; // turn off leds
    spi_miso = bz;             // not using SPI
    spi_channel = bzzzz;       // not using flags
    avr_rx = bz;               // not using serial port    

    led_seg_input_power = 1;
    button_cond_restart.in = button_restart;
    edge_detector_restart.in = button_cond_restart.out;
    button_cond_operator0.in = button_operator[0];
    edge_detector_operator0.in = button_cond_operator0.out;
    button_cond_operator1.in = button_operator[1];
    edge_detector_operator1.in = button_cond_operator1.out;
    button_cond_operator2.in = button_operator[2];
    edge_detector_operator2.in = button_cond_operator2.out;
    button_cond_operator3.in = button_operator[3];
    edge_detector_operator3.in = button_cond_operator3.out;
    button_cond_operator4.in = button_operator[4];
    edge_detector_operator4.in = button_cond_operator4.out;
    button_cond_number0.in = button_number[0];
    edge_detector_number0.in = button_cond_number0.out;    
    button_cond_number1.in = button_number[1];
    edge_detector_number1.in = button_cond_number1.out;    
    button_cond_number2.in = button_number[2];
    edge_detector_number2.in = button_cond_number2.out;    
    button_cond_number3.in = button_number[3];
    edge_detector_number3.in = button_cond_number3.out;    
    button_cond_number4.in = button_number[4];
    edge_detector_number4.in = button_cond_number4.out;    
    
    
    rom.address = 0;
    alu1.alufn = 0;
    alu1.a = 0;
    alu1.b = 0;
    
    
    //STATEMACHINE FOR TEST CASES
    case (state.q) {
      state.IDLE: //normal function   
      level.d = 0;
      rom.address = 0;
      options.d = b11011101110111011101;
      options_temp.d = b11011101110111011101;
      goal.d=OUTPUT0;
      number_input.d = b1101;
      number_output.d = OUTPUT0;
        if (edge_detector_restart.out){ // restart button to start
          state.d = state.LEVELSELECT; //select level
          options_temp.d = LSEL;
                  }
        
      state.LEVELSELECT:
      level.d = 0;
      rom.address = 0;
      options.d = rom.options;
      goal.d=rom.goal;              
      number_input.d = 0;
      number_output.d = 0;
      if (edge_detector_number4.out){
        level.d=1;
        state.d=state.LOAD;}
      else if(edge_detector_number3.out){
        level.d=4;
          state.d=state.LOAD;}
       else if (edge_detector_number2.out){
        level.d=7;
          state.d=state.LOAD;}
        
        
      state.LOAD:
      rom.address = level.q;
      options.d = rom.options;
      options_temp.d=rom.options;
      goal.d = rom.goal;
      number_input.d = 0;
      number_output.d = 0;
      state.d=state.LEVEL1;
      
     
      state.LEVEL1: 
      if (edge_detector_number0.out && options_temp.q[3:0]!= b1101){
        options_temp.d[19:0] = options.q;
        number_input.d = options_temp.q[3:0];
        options_temp.d[3:0] = b1101;
        }
      else if (edge_detector_number1.out &&options_temp.q[7:4]!= b1101){
        options_temp.d[19:0] = options.q;
        number_input.d = options_temp.q[7:4];
        options_temp.d[7:4]=b1101;   
        }

      else if (edge_detector_number2.out && options_temp.q[11:8]!= b1101){
        options_temp.d[19:0] = options.q;
        number_input.d = options_temp.q[11:8];          
        options_temp.d[11:8]=b1101;  }

      else if (edge_detector_number3.out &&options_temp.q[15:12]!= b1101){
        options_temp.d[19:0] = options.q;
        number_input.d = options_temp.q[15:12];          
        options_temp.d[15:12]=b1101;  }
        
      else if (edge_detector_number4.out &&options_temp.q[19:16]!= b1101){
        options_temp.d[19:0] = options.q;    
        number_input.d = options_temp.q[19:16];             
        options_temp.d[19:16]=b1101;  }
      
      else if (edge_detector_operator4.out && number_input.q!= 0){ // ADD
        alu1.alufn = 6b0;
        alu1.a = number_input.q;
        alu1.b = number_output.q;
        number_output.d = alu1.alu;
        number_input.d = 0;
        options.d = options_temp.q;
        options_temp.d=options_temp.q;
          }
        
      else if (edge_detector_operator3.out && number_input.q!= 0 && number_input.q >= number_output.q){ // SUB (A-B/left-right/input-output)
        alu1.alufn = 6b1;
        alu1.a = number_input.q;
        alu1.b = number_output.q;
        number_output.d = alu1.alu;
        number_input.d = 0;
        options.d = options_temp.q;
        options_temp.d=options_temp.q;
          }  
      else if (edge_detector_operator2.out && number_input.q!= 0 && number_output.q >= number_input.q){ // SUB (B-A/right-left/output-input)
        alu1.alufn = 6b1;
        alu1.a = number_output.q;
        alu1.b = number_input.q;
        number_output.d = alu1.alu;
        number_input.d = 0;
        options.d = options_temp.q;
        options_temp.d=options_temp.q;
          }      
        
      else if (edge_detector_operator1.out && number_input.q!= 0){ // MUL
        alu1.alufn = 6b10;
        alu1.a = number_input.q;
        alu1.b = number_output.q;
        number_output.d = alu1.alu;
        number_input.d = 0;
        options.d = options_temp.q;
        options_temp.d=options_temp.q;
          }
       else if (edge_detector_operator0.out && number_input.q!= 0 && level.q >=7 ){ //  XOR
        alu1.alufn = 6b10110;
        alu1.a = number_input.q;
        alu1.b = number_output.q;
        number_output.d = alu1.alu;
        number_input.d = 0;
        options.d = options_temp.q;
        options_temp.d=options_temp.q;
        }
       else if (edge_detector_restart.out){ //  RESTART
        number_output.d = 0;
        number_input.d = 0;
        options.d = options_temp.q;
        options_temp.d=options_temp.q;
        state.d=state.LOAD;
    }
       else if (options.q == b11011101110111011101 &&number_output.q == goal.q){
        state.d=state.WIN;}
       else if (options.q == b11011101110111011101 && number_output.q != goal.q){
        state.d=state.LOSE;}
        
       state.WIN:
          options_temp.d=PASS;
          if (edge_detector_restart.out){
          if (level.q ==6 || level.q == 3 || level.q ==9){
            state.d=state.IDLE;
            }
          else {level.d=level.q+1;
          state.d=state.LOAD;}}
          
       state.LOSE:     
          options_temp.d=FAIL;
          if (edge_detector_restart.out){
          state.d=state.LOAD;}
          
          
          
          
    } 
      
      sevenseg_options_0.char = options_temp.q[3:0];
      sevenseg_options_1.char = options_temp.q[7:4];
      sevenseg_options_2.char = options_temp.q[11:8];
      sevenseg_options_3.char = options_temp.q[15:12];
      sevenseg_options_4.char = options_temp.q[19:16];

      sevenseg_input.char = number_input.q;
      decimal_output.a = number_output.q;
      sevenseg_output_0.char = decimal_output.out0;
      sevenseg_output_1.char =decimal_output.out1;
      sevenseg_output_2.char = decimal_output.out2;
      sevenseg_output_3.char = decimal_output.out3;
      decimal_goal.a = goal.q;    
      sevenseg_goal_0.char = decimal_goal.out0;
      sevenseg_goal_1.char = decimal_goal.out1;
      sevenseg_goal_2.char = decimal_goal.out2;
      sevenseg_goal_3.char = decimal_goal.out3;
    

        case(ctr.value){
      0:
        led_seg_options =sevenseg_options_1.segs; 
        led_sel_options = ~4b1;
        led_seg_goal=sevenseg_goal_0.segs; 
        led_sel_goal= ~4b1;
        led_seg_output=sevenseg_output_0.segs; 
        led_sel_output= ~4b1;
      1: 
        led_seg_options=sevenseg_options_2.segs;
        led_sel_options = ~4b10;
        led_seg_goal=sevenseg_goal_1.segs; 
        led_sel_goal= ~4b10;
        led_seg_output=sevenseg_output_1.segs; 
        led_sel_output= ~4b10;
      2:
        led_seg_options =sevenseg_options_3.segs;          
        led_sel_options = ~4b100;
        led_seg_goal=sevenseg_goal_2.segs; 
        led_sel_goal= ~4b100;
        led_seg_output=sevenseg_output_2.segs; 
        led_sel_output=~4b100;     
      3: 
        led_seg_options=sevenseg_options_4.segs;
        led_sel_options = ~4b1000;
        led_seg_goal=sevenseg_goal_3.segs; 
        led_sel_goal= ~4b1000;
        led_seg_output=sevenseg_output_3.segs; 
        led_sel_output= ~4b1000;
      default:
        led_seg_options=7b0;
        led_sel_options = ~4b0;       
        led_seg_goal=7b0; 
        led_sel_goal= ~4b0;   
        led_seg_output=7b0; 
        led_sel_output= ~4b0;  
  }
        led_seg_options1=~sevenseg_options_0.segs;
        led_seg_input=~sevenseg_input.segs;

}
}
