/*
   This file was generated automatically by the Mojo IDE version B1.2.5.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [7:0] led_seg_options,
    output reg [3:0] led_sel_options,
    output reg [7:0] led_seg_options1,
    output reg [7:0] led_seg_goal,
    output reg [3:0] led_sel_goal,
    output reg [7:0] led_seg_output,
    output reg [3:0] led_sel_output,
    output reg [7:0] led_seg_input,
    output reg led_seg_input_power,
    input [4:0] button_operator,
    input [4:0] button_number,
    input button_restart
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_edge_detector_restart_out;
  reg [1-1:0] M_edge_detector_restart_in;
  edge_detector_2 edge_detector_restart (
    .clk(clk),
    .in(M_edge_detector_restart_in),
    .out(M_edge_detector_restart_out)
  );
  wire [1-1:0] M_button_cond_restart_out;
  reg [1-1:0] M_button_cond_restart_in;
  button_conditioner_3 button_cond_restart (
    .clk(clk),
    .in(M_button_cond_restart_in),
    .out(M_button_cond_restart_out)
  );
  wire [1-1:0] M_edge_detector_operator0_out;
  reg [1-1:0] M_edge_detector_operator0_in;
  edge_detector_2 edge_detector_operator0 (
    .clk(clk),
    .in(M_edge_detector_operator0_in),
    .out(M_edge_detector_operator0_out)
  );
  wire [1-1:0] M_button_cond_operator0_out;
  reg [1-1:0] M_button_cond_operator0_in;
  button_conditioner_3 button_cond_operator0 (
    .clk(clk),
    .in(M_button_cond_operator0_in),
    .out(M_button_cond_operator0_out)
  );
  wire [1-1:0] M_edge_detector_operator1_out;
  reg [1-1:0] M_edge_detector_operator1_in;
  edge_detector_2 edge_detector_operator1 (
    .clk(clk),
    .in(M_edge_detector_operator1_in),
    .out(M_edge_detector_operator1_out)
  );
  wire [1-1:0] M_button_cond_operator1_out;
  reg [1-1:0] M_button_cond_operator1_in;
  button_conditioner_3 button_cond_operator1 (
    .clk(clk),
    .in(M_button_cond_operator1_in),
    .out(M_button_cond_operator1_out)
  );
  wire [1-1:0] M_edge_detector_operator2_out;
  reg [1-1:0] M_edge_detector_operator2_in;
  edge_detector_2 edge_detector_operator2 (
    .clk(clk),
    .in(M_edge_detector_operator2_in),
    .out(M_edge_detector_operator2_out)
  );
  wire [1-1:0] M_button_cond_operator2_out;
  reg [1-1:0] M_button_cond_operator2_in;
  button_conditioner_3 button_cond_operator2 (
    .clk(clk),
    .in(M_button_cond_operator2_in),
    .out(M_button_cond_operator2_out)
  );
  wire [1-1:0] M_edge_detector_operator3_out;
  reg [1-1:0] M_edge_detector_operator3_in;
  edge_detector_2 edge_detector_operator3 (
    .clk(clk),
    .in(M_edge_detector_operator3_in),
    .out(M_edge_detector_operator3_out)
  );
  wire [1-1:0] M_button_cond_operator3_out;
  reg [1-1:0] M_button_cond_operator3_in;
  button_conditioner_3 button_cond_operator3 (
    .clk(clk),
    .in(M_button_cond_operator3_in),
    .out(M_button_cond_operator3_out)
  );
  wire [1-1:0] M_edge_detector_operator4_out;
  reg [1-1:0] M_edge_detector_operator4_in;
  edge_detector_2 edge_detector_operator4 (
    .clk(clk),
    .in(M_edge_detector_operator4_in),
    .out(M_edge_detector_operator4_out)
  );
  wire [1-1:0] M_button_cond_operator4_out;
  reg [1-1:0] M_button_cond_operator4_in;
  button_conditioner_3 button_cond_operator4 (
    .clk(clk),
    .in(M_button_cond_operator4_in),
    .out(M_button_cond_operator4_out)
  );
  wire [1-1:0] M_edge_detector_number0_out;
  reg [1-1:0] M_edge_detector_number0_in;
  edge_detector_2 edge_detector_number0 (
    .clk(clk),
    .in(M_edge_detector_number0_in),
    .out(M_edge_detector_number0_out)
  );
  wire [1-1:0] M_button_cond_number0_out;
  reg [1-1:0] M_button_cond_number0_in;
  button_conditioner_3 button_cond_number0 (
    .clk(clk),
    .in(M_button_cond_number0_in),
    .out(M_button_cond_number0_out)
  );
  wire [1-1:0] M_edge_detector_number1_out;
  reg [1-1:0] M_edge_detector_number1_in;
  edge_detector_2 edge_detector_number1 (
    .clk(clk),
    .in(M_edge_detector_number1_in),
    .out(M_edge_detector_number1_out)
  );
  wire [1-1:0] M_button_cond_number1_out;
  reg [1-1:0] M_button_cond_number1_in;
  button_conditioner_3 button_cond_number1 (
    .clk(clk),
    .in(M_button_cond_number1_in),
    .out(M_button_cond_number1_out)
  );
  wire [1-1:0] M_edge_detector_number2_out;
  reg [1-1:0] M_edge_detector_number2_in;
  edge_detector_2 edge_detector_number2 (
    .clk(clk),
    .in(M_edge_detector_number2_in),
    .out(M_edge_detector_number2_out)
  );
  wire [1-1:0] M_button_cond_number2_out;
  reg [1-1:0] M_button_cond_number2_in;
  button_conditioner_3 button_cond_number2 (
    .clk(clk),
    .in(M_button_cond_number2_in),
    .out(M_button_cond_number2_out)
  );
  wire [1-1:0] M_edge_detector_number3_out;
  reg [1-1:0] M_edge_detector_number3_in;
  edge_detector_2 edge_detector_number3 (
    .clk(clk),
    .in(M_edge_detector_number3_in),
    .out(M_edge_detector_number3_out)
  );
  wire [1-1:0] M_button_cond_number3_out;
  reg [1-1:0] M_button_cond_number3_in;
  button_conditioner_3 button_cond_number3 (
    .clk(clk),
    .in(M_button_cond_number3_in),
    .out(M_button_cond_number3_out)
  );
  wire [1-1:0] M_edge_detector_number4_out;
  reg [1-1:0] M_edge_detector_number4_in;
  edge_detector_2 edge_detector_number4 (
    .clk(clk),
    .in(M_edge_detector_number4_in),
    .out(M_edge_detector_number4_out)
  );
  wire [1-1:0] M_button_cond_number4_out;
  reg [1-1:0] M_button_cond_number4_in;
  button_conditioner_3 button_cond_number4 (
    .clk(clk),
    .in(M_button_cond_number4_in),
    .out(M_button_cond_number4_out)
  );
  reg [7:0] M_goal_d, M_goal_q = 1'h0;
  reg [2:0] M_level_d, M_level_q = 1'h0;
  reg [19:0] M_options_temp_d, M_options_temp_q = 1'h0;
  reg [19:0] M_options_d, M_options_q = 1'h0;
  reg [3:0] M_number_input_d, M_number_input_q = 1'h0;
  reg [7:0] M_number_output_d, M_number_output_q = 1'h0;
  wire [3-1:0] M_ctr_value;
  counter_24 ctr (
    .clk(clk),
    .rst(rst),
    .value(M_ctr_value)
  );
  localparam IDLE_state = 3'd0;
  localparam LEVELSELECT_state = 3'd1;
  localparam LOAD_state = 3'd2;
  localparam LEVEL1_state = 3'd3;
  localparam WIN_state = 3'd4;
  localparam LOSE_state = 3'd5;
  localparam END_state = 3'd6;
  
  reg [2:0] M_state_d, M_state_q = IDLE_state;
  
  wire [20-1:0] M_rom_options;
  wire [8-1:0] M_rom_goal;
  reg [4-1:0] M_rom_address;
  rom_25 rom (
    .address(M_rom_address),
    .options(M_rom_options),
    .goal(M_rom_goal)
  );
  
  wire [8-1:0] M_alu1_alu;
  wire [1-1:0] M_alu1_z;
  wire [1-1:0] M_alu1_v;
  wire [1-1:0] M_alu1_n;
  reg [6-1:0] M_alu1_alufn;
  reg [8-1:0] M_alu1_a;
  reg [8-1:0] M_alu1_b;
  alu_26 alu1 (
    .alufn(M_alu1_alufn),
    .a(M_alu1_a),
    .b(M_alu1_b),
    .alu(M_alu1_alu),
    .z(M_alu1_z),
    .v(M_alu1_v),
    .n(M_alu1_n)
  );
  
  wire [4-1:0] M_decimal_output_out3;
  wire [4-1:0] M_decimal_output_out2;
  wire [4-1:0] M_decimal_output_out1;
  wire [4-1:0] M_decimal_output_out0;
  reg [8-1:0] M_decimal_output_a;
  decimal3_27 decimal_output (
    .a(M_decimal_output_a),
    .out3(M_decimal_output_out3),
    .out2(M_decimal_output_out2),
    .out1(M_decimal_output_out1),
    .out0(M_decimal_output_out0)
  );
  
  wire [4-1:0] M_decimal_goal_out3;
  wire [4-1:0] M_decimal_goal_out2;
  wire [4-1:0] M_decimal_goal_out1;
  wire [4-1:0] M_decimal_goal_out0;
  reg [8-1:0] M_decimal_goal_a;
  decimal3_27 decimal_goal (
    .a(M_decimal_goal_a),
    .out3(M_decimal_goal_out3),
    .out2(M_decimal_goal_out2),
    .out1(M_decimal_goal_out1),
    .out0(M_decimal_goal_out0)
  );
  
  wire [7-1:0] M_sevenseg_options_0_segs;
  reg [4-1:0] M_sevenseg_options_0_char;
  seven_seg_29 sevenseg_options_0 (
    .char(M_sevenseg_options_0_char),
    .segs(M_sevenseg_options_0_segs)
  );
  
  wire [7-1:0] M_sevenseg_options_1_segs;
  reg [4-1:0] M_sevenseg_options_1_char;
  seven_seg_29 sevenseg_options_1 (
    .char(M_sevenseg_options_1_char),
    .segs(M_sevenseg_options_1_segs)
  );
  
  wire [7-1:0] M_sevenseg_options_2_segs;
  reg [4-1:0] M_sevenseg_options_2_char;
  seven_seg_29 sevenseg_options_2 (
    .char(M_sevenseg_options_2_char),
    .segs(M_sevenseg_options_2_segs)
  );
  
  wire [7-1:0] M_sevenseg_options_3_segs;
  reg [4-1:0] M_sevenseg_options_3_char;
  seven_seg_29 sevenseg_options_3 (
    .char(M_sevenseg_options_3_char),
    .segs(M_sevenseg_options_3_segs)
  );
  
  wire [7-1:0] M_sevenseg_options_4_segs;
  reg [4-1:0] M_sevenseg_options_4_char;
  seven_seg_29 sevenseg_options_4 (
    .char(M_sevenseg_options_4_char),
    .segs(M_sevenseg_options_4_segs)
  );
  
  wire [7-1:0] M_sevenseg_goal_0_segs;
  reg [4-1:0] M_sevenseg_goal_0_char;
  seven_seg_29 sevenseg_goal_0 (
    .char(M_sevenseg_goal_0_char),
    .segs(M_sevenseg_goal_0_segs)
  );
  
  wire [7-1:0] M_sevenseg_goal_1_segs;
  reg [4-1:0] M_sevenseg_goal_1_char;
  seven_seg_29 sevenseg_goal_1 (
    .char(M_sevenseg_goal_1_char),
    .segs(M_sevenseg_goal_1_segs)
  );
  
  wire [7-1:0] M_sevenseg_goal_2_segs;
  reg [4-1:0] M_sevenseg_goal_2_char;
  seven_seg_29 sevenseg_goal_2 (
    .char(M_sevenseg_goal_2_char),
    .segs(M_sevenseg_goal_2_segs)
  );
  
  wire [7-1:0] M_sevenseg_goal_3_segs;
  reg [4-1:0] M_sevenseg_goal_3_char;
  seven_seg_29 sevenseg_goal_3 (
    .char(M_sevenseg_goal_3_char),
    .segs(M_sevenseg_goal_3_segs)
  );
  
  wire [7-1:0] M_sevenseg_input_segs;
  reg [4-1:0] M_sevenseg_input_char;
  seven_seg_29 sevenseg_input (
    .char(M_sevenseg_input_char),
    .segs(M_sevenseg_input_segs)
  );
  
  wire [7-1:0] M_sevenseg_output_0_segs;
  reg [4-1:0] M_sevenseg_output_0_char;
  seven_seg_29 sevenseg_output_0 (
    .char(M_sevenseg_output_0_char),
    .segs(M_sevenseg_output_0_segs)
  );
  
  wire [7-1:0] M_sevenseg_output_1_segs;
  reg [4-1:0] M_sevenseg_output_1_char;
  seven_seg_29 sevenseg_output_1 (
    .char(M_sevenseg_output_1_char),
    .segs(M_sevenseg_output_1_segs)
  );
  
  wire [7-1:0] M_sevenseg_output_2_segs;
  reg [4-1:0] M_sevenseg_output_2_char;
  seven_seg_29 sevenseg_output_2 (
    .char(M_sevenseg_output_2_char),
    .segs(M_sevenseg_output_2_segs)
  );
  
  wire [7-1:0] M_sevenseg_output_3_segs;
  reg [4-1:0] M_sevenseg_output_3_char;
  seven_seg_29 sevenseg_output_3 (
    .char(M_sevenseg_output_3_char),
    .segs(M_sevenseg_output_3_segs)
  );
  
  localparam PASS = 20'hba55d;
  
  localparam FAIL = 20'hca1fd;
  
  localparam LSEL = 20'hf5efd;
  
  localparam OUTPUT0 = 8'hff;
  
  always @* begin
    M_state_d = M_state_q;
    M_level_d = M_level_q;
    M_options_temp_d = M_options_temp_q;
    M_number_output_d = M_number_output_q;
    M_goal_d = M_goal_q;
    M_number_input_d = M_number_input_q;
    M_options_d = M_options_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    led_seg_input_power = 1'h1;
    M_button_cond_restart_in = button_restart;
    M_edge_detector_restart_in = M_button_cond_restart_out;
    M_button_cond_operator0_in = button_operator[0+0-:1];
    M_edge_detector_operator0_in = M_button_cond_operator0_out;
    M_button_cond_operator1_in = button_operator[1+0-:1];
    M_edge_detector_operator1_in = M_button_cond_operator1_out;
    M_button_cond_operator2_in = button_operator[2+0-:1];
    M_edge_detector_operator2_in = M_button_cond_operator2_out;
    M_button_cond_operator3_in = button_operator[3+0-:1];
    M_edge_detector_operator3_in = M_button_cond_operator3_out;
    M_button_cond_operator4_in = button_operator[4+0-:1];
    M_edge_detector_operator4_in = M_button_cond_operator4_out;
    M_button_cond_number0_in = button_number[0+0-:1];
    M_edge_detector_number0_in = M_button_cond_number0_out;
    M_button_cond_number1_in = button_number[1+0-:1];
    M_edge_detector_number1_in = M_button_cond_number1_out;
    M_button_cond_number2_in = button_number[2+0-:1];
    M_edge_detector_number2_in = M_button_cond_number2_out;
    M_button_cond_number3_in = button_number[3+0-:1];
    M_edge_detector_number3_in = M_button_cond_number3_out;
    M_button_cond_number4_in = button_number[4+0-:1];
    M_edge_detector_number4_in = M_button_cond_number4_out;
    M_rom_address = 1'h0;
    M_alu1_alufn = 1'h0;
    M_alu1_a = 1'h0;
    M_alu1_b = 1'h0;
    
    case (M_state_q)
      IDLE_state: begin
        M_level_d = 1'h0;
        M_rom_address = 1'h0;
        M_options_d = 20'hddddd;
        M_options_temp_d = 20'hddddd;
        M_goal_d = 8'hff;
        M_number_input_d = 4'hd;
        M_number_output_d = 8'hff;
        if (M_edge_detector_restart_out) begin
          M_state_d = LEVELSELECT_state;
          M_options_temp_d = 20'hf5efd;
        end
      end
      LEVELSELECT_state: begin
        M_level_d = 1'h0;
        M_rom_address = 1'h0;
        M_options_d = M_rom_options;
        M_goal_d = M_rom_goal;
        M_number_input_d = 1'h0;
        M_number_output_d = 1'h0;
        if (M_edge_detector_number4_out) begin
          M_level_d = 1'h1;
          M_state_d = LOAD_state;
        end else begin
          if (M_edge_detector_number3_out) begin
            M_level_d = 3'h4;
            M_state_d = LOAD_state;
          end else begin
            if (M_edge_detector_number2_out) begin
              M_level_d = 3'h7;
              M_state_d = LOAD_state;
            end
          end
        end
      end
      LOAD_state: begin
        M_rom_address = M_level_q;
        M_options_d = M_rom_options;
        M_options_temp_d = M_rom_options;
        M_goal_d = M_rom_goal;
        M_number_input_d = 1'h0;
        M_number_output_d = 1'h0;
        M_state_d = LEVEL1_state;
      end
      LEVEL1_state: begin
        if (M_edge_detector_number0_out && M_options_temp_q[0+3-:4] != 4'hd) begin
          M_options_temp_d[0+19-:20] = M_options_q;
          M_number_input_d = M_options_temp_q[0+3-:4];
          M_options_temp_d[0+3-:4] = 4'hd;
        end else begin
          if (M_edge_detector_number1_out && M_options_temp_q[4+3-:4] != 4'hd) begin
            M_options_temp_d[0+19-:20] = M_options_q;
            M_number_input_d = M_options_temp_q[4+3-:4];
            M_options_temp_d[4+3-:4] = 4'hd;
          end else begin
            if (M_edge_detector_number2_out && M_options_temp_q[8+3-:4] != 4'hd) begin
              M_options_temp_d[0+19-:20] = M_options_q;
              M_number_input_d = M_options_temp_q[8+3-:4];
              M_options_temp_d[8+3-:4] = 4'hd;
            end else begin
              if (M_edge_detector_number3_out && M_options_temp_q[12+3-:4] != 4'hd) begin
                M_options_temp_d[0+19-:20] = M_options_q;
                M_number_input_d = M_options_temp_q[12+3-:4];
                M_options_temp_d[12+3-:4] = 4'hd;
              end else begin
                if (M_edge_detector_number4_out && M_options_temp_q[16+3-:4] != 4'hd) begin
                  M_options_temp_d[0+19-:20] = M_options_q;
                  M_number_input_d = M_options_temp_q[16+3-:4];
                  M_options_temp_d[16+3-:4] = 4'hd;
                end else begin
                  if (M_edge_detector_operator4_out && M_number_input_q != 1'h0) begin
                    M_alu1_alufn = 6'h00;
                    M_alu1_a = M_number_input_q;
                    M_alu1_b = M_number_output_q;
                    M_number_output_d = M_alu1_alu;
                    M_number_input_d = 1'h0;
                    M_options_d = M_options_temp_q;
                    M_options_temp_d = M_options_temp_q;
                  end else begin
                    if (M_edge_detector_operator3_out && M_number_input_q != 1'h0 && M_number_input_q >= M_number_output_q) begin
                      M_alu1_alufn = 6'h01;
                      M_alu1_a = M_number_input_q;
                      M_alu1_b = M_number_output_q;
                      M_number_output_d = M_alu1_alu;
                      M_number_input_d = 1'h0;
                      M_options_d = M_options_temp_q;
                      M_options_temp_d = M_options_temp_q;
                    end else begin
                      if (M_edge_detector_operator2_out && M_number_input_q != 1'h0 && M_number_output_q >= M_number_input_q) begin
                        M_alu1_alufn = 6'h01;
                        M_alu1_a = M_number_output_q;
                        M_alu1_b = M_number_input_q;
                        M_number_output_d = M_alu1_alu;
                        M_number_input_d = 1'h0;
                        M_options_d = M_options_temp_q;
                        M_options_temp_d = M_options_temp_q;
                      end else begin
                        if (M_edge_detector_operator1_out && M_number_input_q != 1'h0) begin
                          M_alu1_alufn = 6'h02;
                          M_alu1_a = M_number_input_q;
                          M_alu1_b = M_number_output_q;
                          M_number_output_d = M_alu1_alu;
                          M_number_input_d = 1'h0;
                          M_options_d = M_options_temp_q;
                          M_options_temp_d = M_options_temp_q;
                        end else begin
                          if (M_edge_detector_operator0_out && M_number_input_q != 1'h0 && M_level_q >= 3'h7) begin
                            M_alu1_alufn = 6'h16;
                            M_alu1_a = M_number_input_q;
                            M_alu1_b = M_number_output_q;
                            M_number_output_d = M_alu1_alu;
                            M_number_input_d = 1'h0;
                            M_options_d = M_options_temp_q;
                            M_options_temp_d = M_options_temp_q;
                          end else begin
                            if (M_edge_detector_restart_out) begin
                              M_number_output_d = 1'h0;
                              M_number_input_d = 1'h0;
                              M_options_d = M_options_temp_q;
                              M_options_temp_d = M_options_temp_q;
                              M_state_d = LOAD_state;
                            end else begin
                              if (M_options_q == 20'hddddd && M_number_output_q == M_goal_q) begin
                                M_state_d = WIN_state;
                              end else begin
                                if (M_options_q == 20'hddddd && M_number_output_q != M_goal_q) begin
                                  M_state_d = LOSE_state;
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
      WIN_state: begin
        M_options_temp_d = 20'hba55d;
        if (M_edge_detector_restart_out) begin
          if (M_level_q == 3'h6 || M_level_q == 2'h3 || M_level_q == 4'h9) begin
            M_state_d = IDLE_state;
          end else begin
            M_level_d = M_level_q + 1'h1;
            M_state_d = LOAD_state;
          end
        end
      end
      LOSE_state: begin
        M_options_temp_d = 20'hca1fd;
        if (M_edge_detector_restart_out) begin
          M_state_d = LOAD_state;
        end
      end
    endcase
    M_sevenseg_options_0_char = M_options_temp_q[0+3-:4];
    M_sevenseg_options_1_char = M_options_temp_q[4+3-:4];
    M_sevenseg_options_2_char = M_options_temp_q[8+3-:4];
    M_sevenseg_options_3_char = M_options_temp_q[12+3-:4];
    M_sevenseg_options_4_char = M_options_temp_q[16+3-:4];
    M_sevenseg_input_char = M_number_input_q;
    M_decimal_output_a = M_number_output_q;
    M_sevenseg_output_0_char = M_decimal_output_out0;
    M_sevenseg_output_1_char = M_decimal_output_out1;
    M_sevenseg_output_2_char = M_decimal_output_out2;
    M_sevenseg_output_3_char = M_decimal_output_out3;
    M_decimal_goal_a = M_goal_q;
    M_sevenseg_goal_0_char = M_decimal_goal_out0;
    M_sevenseg_goal_1_char = M_decimal_goal_out1;
    M_sevenseg_goal_2_char = M_decimal_goal_out2;
    M_sevenseg_goal_3_char = M_decimal_goal_out3;
    
    case (M_ctr_value)
      1'h0: begin
        led_seg_options = M_sevenseg_options_1_segs;
        led_sel_options = 4'he;
        led_seg_goal = M_sevenseg_goal_0_segs;
        led_sel_goal = 4'he;
        led_seg_output = M_sevenseg_output_0_segs;
        led_sel_output = 4'he;
      end
      1'h1: begin
        led_seg_options = M_sevenseg_options_2_segs;
        led_sel_options = 4'hd;
        led_seg_goal = M_sevenseg_goal_1_segs;
        led_sel_goal = 4'hd;
        led_seg_output = M_sevenseg_output_1_segs;
        led_sel_output = 4'hd;
      end
      2'h2: begin
        led_seg_options = M_sevenseg_options_3_segs;
        led_sel_options = 4'hb;
        led_seg_goal = M_sevenseg_goal_2_segs;
        led_sel_goal = 4'hb;
        led_seg_output = M_sevenseg_output_2_segs;
        led_sel_output = 4'hb;
      end
      2'h3: begin
        led_seg_options = M_sevenseg_options_4_segs;
        led_sel_options = 4'h7;
        led_seg_goal = M_sevenseg_goal_3_segs;
        led_sel_goal = 4'h7;
        led_seg_output = M_sevenseg_output_3_segs;
        led_sel_output = 4'h7;
      end
      default: begin
        led_seg_options = 7'h00;
        led_sel_options = 4'hf;
        led_seg_goal = 7'h00;
        led_sel_goal = 4'hf;
        led_seg_output = 7'h00;
        led_sel_output = 4'hf;
      end
    endcase
    led_seg_options1 = ~M_sevenseg_options_0_segs;
    led_seg_input = ~M_sevenseg_input_segs;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_goal_q <= 1'h0;
      M_level_q <= 1'h0;
      M_options_temp_q <= 1'h0;
      M_options_q <= 1'h0;
      M_number_input_q <= 1'h0;
      M_number_output_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_goal_q <= M_goal_d;
      M_level_q <= M_level_d;
      M_options_temp_q <= M_options_temp_d;
      M_options_q <= M_options_d;
      M_number_input_q <= M_number_input_d;
      M_number_output_q <= M_number_output_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
